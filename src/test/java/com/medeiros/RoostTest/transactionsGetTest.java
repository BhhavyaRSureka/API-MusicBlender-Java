// ********RoostGPT********
/*
Test generated by RoostGPT for test ReatAssured-Test using AI Type Open AI and AI Model gpt-4

Test generated for /accounts/{AccountId}/statements/{StatementId}/transactions_get for http method type GET in rest-assured framework

RoostTestHash=01b44aae8a


*/

// ********RoostGPT********
package com.medeiros.RoostTest;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import static org.junit.Assert.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class transactionsGetTest {
  
    @Test  
    public void transactionsGet_Test() {  
        RestAssured.baseURI = System.getenv("BASE_URL");  
  
        // Read CSV file  
        try (BufferedReader reader = new BufferedReader(new FileReader("src" + File.separator + "test" + File.separator + "java" + File.separator + "com" + File.separator + "medeiros" + File.separator + "RoostTest" + File.separator + "transactionsGetTest.csv"))) {  
            String headerLine = reader.readLine();  
            String[] headers = headerLine.split(",");  
  
            String line;  
            while ((line = reader.readLine()) != null) {  
                String[] data = line.split(",");  
  
                // Create a map of header to data  
                Map<String, String> map = new HashMap<>();  
                for (int i = 0; i < headers.length; i++) {  
                    map.put(headers[i], data[i]);  
                }  
                
  
                Response response = given()
                .pathParam("AccountId", map.get("AccountId") != null ? map.get("AccountId") : "") 
    .pathParam("StatementId", map.get("StatementId") != null ? map.get("StatementId") : "")
    .header("Authorization", "Bearer " + System.getenv("BEARER_TOKEN"))
    .header("x-fapi-financial-id", map.get("x-fapi-financial-id") != null ? map.get("x-fapi-financial-id") : "")
                .when()
                .get("/accounts/{AccountId}/statements/{StatementId}/transactions")  
                .then() 
                .extract().response();    
         
                if (response.statusCode() == 200) {
					System.out.println("Description: Transactions Read");
      
              if (response.jsonPath().get("Data") != null) {      
              if (response.jsonPath().get("Data.Transaction") != null) {      
                for (int i = 0; i < response.jsonPath().getList("Data.Transaction").size(); i++) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].AccountId") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].AccountId"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].AccountId").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].AccountId").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].TransactionId") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].TransactionId"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].TransactionId").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].TransactionId").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].TransactionReference") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].TransactionReference"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].TransactionReference").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].TransactionReference").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].StatementReference") != null) {      
                for (int i1 = 0; i1 < response.jsonPath().getList("Data.Transaction["+ i +"].StatementReference").size(); i1++) {      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("Data.Transaction["+ i +"].StatementReference"), instanceOf(List.class));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditDebitIndicator") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditDebitIndicator"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditDebitIndicator"), anyOf(equalTo("Credit"), equalTo("Debit")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Status") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].Status"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].Status"), anyOf(equalTo("Booked"), equalTo("Pending")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].BookingDateTime") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].BookingDateTime"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].ValueDateTime") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].ValueDateTime"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].AddressLine") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].AddressLine"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].AddressLine").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].AddressLine").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Amount") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Amount.Amount") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].Amount.Amount"), matchesPattern("^\\d{1,13}\\.\\d{1,5}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].Amount.Amount"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Amount.Currency") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].Amount.Currency"), matchesPattern("^[A-Z]{3,3}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].Amount.Currency"), instanceOf(String.class));  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].ChargeAmount") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].ChargeAmount.Amount") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].ChargeAmount.Amount"), matchesPattern("^\\d{1,13}\\.\\d{1,5}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].ChargeAmount.Amount"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].ChargeAmount.Currency") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].ChargeAmount.Currency"), matchesPattern("^[A-Z]{3,3}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].ChargeAmount.Currency"), instanceOf(String.class));  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.SourceCurrency") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CurrencyExchange.SourceCurrency"), matchesPattern("^[A-Z]{3,3}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.SourceCurrency"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.TargetCurrency") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CurrencyExchange.TargetCurrency"), matchesPattern("^[A-Z]{3,3}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.TargetCurrency"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.UnitCurrency") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CurrencyExchange.UnitCurrency"), matchesPattern("^[A-Z]{3,3}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.UnitCurrency"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.ExchangeRate") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.ExchangeRate"), instanceOf(Integer.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.ContractIdentification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.ContractIdentification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CurrencyExchange.ContractIdentification").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CurrencyExchange.ContractIdentification").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.QuotationDate") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.QuotationDate"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.InstructedAmount") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.InstructedAmount.Amount") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CurrencyExchange.InstructedAmount.Amount"), matchesPattern("^\\d{1,13}\\.\\d{1,5}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.InstructedAmount.Amount"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.InstructedAmount.Currency") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CurrencyExchange.InstructedAmount.Currency"), matchesPattern("^[A-Z]{3,3}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CurrencyExchange.InstructedAmount.Currency"), instanceOf(String.class));  
          }
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].BankTransactionCode") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].BankTransactionCode.Code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].BankTransactionCode.Code"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].BankTransactionCode.SubCode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].BankTransactionCode.SubCode"), instanceOf(String.class));  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].ProprietaryBankTransactionCode") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Code"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Code").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Code").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Issuer") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Issuer"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Issuer").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].ProprietaryBankTransactionCode.Issuer").length(), greaterThanOrEqualTo(1));
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.CardSchemeName") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.CardSchemeName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CardInstrument.CardSchemeName"), anyOf(equalTo("AmericanExpress"), equalTo("Diners"), equalTo("Discover"), equalTo("MasterCard"), equalTo("VISA")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.AuthorisationType") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.AuthorisationType"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CardInstrument.AuthorisationType"), anyOf(equalTo("ConsumerDevice"), equalTo("Contactless"), equalTo("None"), equalTo("PIN")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.Name") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.Name"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CardInstrument.Name").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CardInstrument.Name").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.Identification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CardInstrument.Identification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CardInstrument.Identification").length(), lessThanOrEqualTo(34));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CardInstrument.Identification").length(), greaterThanOrEqualTo(1));
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].SupplementaryData") != null) {  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].TransactionInformation") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].TransactionInformation"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].TransactionInformation").length(), lessThanOrEqualTo(500));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].TransactionInformation").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Balance") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Balance.CreditDebitIndicator") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].Balance.CreditDebitIndicator"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].Balance.CreditDebitIndicator"), anyOf(equalTo("Credit"), equalTo("Debit")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Balance.Type") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].Balance.Type"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].Balance.Type"), anyOf(equalTo("ClosingAvailable"), equalTo("ClosingBooked"), equalTo("ClosingCleared"), equalTo("Expected"), equalTo("ForwardAvailable"), equalTo("Information"), equalTo("InterimAvailable"), equalTo("InterimBooked"), equalTo("InterimCleared"), equalTo("OpeningAvailable"), equalTo("OpeningBooked"), equalTo("OpeningCleared"), equalTo("PreviouslyClosedBooked")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Balance.Amount") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Balance.Amount.Amount") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].Balance.Amount.Amount"), matchesPattern("^\\d{1,13}\\.\\d{1,5}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].Balance.Amount.Amount"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].Balance.Amount.Currency") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].Balance.Amount.Currency"), matchesPattern("^[A-Z]{3,3}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].Balance.Amount.Currency"), instanceOf(String.class));  
          }
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].MerchantDetails") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].MerchantDetails.MerchantName") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].MerchantDetails.MerchantName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].MerchantDetails.MerchantName").length(), lessThanOrEqualTo(350));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].MerchantDetails.MerchantName").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].MerchantDetails.MerchantCategoryCode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].MerchantDetails.MerchantCategoryCode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].MerchantDetails.MerchantCategoryCode").length(), lessThanOrEqualTo(4));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].MerchantDetails.MerchantCategoryCode").length(), greaterThanOrEqualTo(3));
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.SchemeName[0]") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.SchemeName[0]"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.SchemeName[0]").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.SchemeName[0]").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.Identification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.Identification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.Identification").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.Identification").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.Name") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.Name"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.Name").length(), lessThanOrEqualTo(140));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.Name").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.AddressType") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.AddressType"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.AddressType"), anyOf(equalTo("Business"), equalTo("Correspondence"), equalTo("DeliveryTo"), equalTo("MailTo"), equalTo("POBox"), equalTo("Postal"), equalTo("Residential"), equalTo("Statement")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.Department") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.Department"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.Department").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.Department").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.SubDepartment") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.SubDepartment"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.SubDepartment").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.SubDepartment").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.StreetName") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.StreetName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.StreetName").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.StreetName").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.BuildingNumber") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.BuildingNumber"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.BuildingNumber").length(), lessThanOrEqualTo(16));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.BuildingNumber").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.PostCode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.PostCode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.PostCode").length(), lessThanOrEqualTo(16));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.PostCode").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.TownName") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.TownName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.TownName").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.TownName").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.CountrySubDivision") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.CountrySubDivision"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.CountrySubDivision").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.CountrySubDivision").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.Country") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.Country"), matchesPattern("^[A-Z]{2,2}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.Country"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.AddressLine") != null) {      
                for (int i1 = 0; i1 < response.jsonPath().getList("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.AddressLine").size(); i1++) {      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("Data.Transaction["+ i +"].CreditorAgent.PostalAddress.AddressLine"), instanceOf(List.class));
  
          }
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.SchemeName[0]") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.SchemeName[0]"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.SchemeName[0]").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.SchemeName[0]").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.Identification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.Identification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.Identification").length(), lessThanOrEqualTo(256));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.Identification").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.Name") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.Name"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.Name").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.Name").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.SecondaryIdentification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].CreditorAccount.SecondaryIdentification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.SecondaryIdentification").length(), lessThanOrEqualTo(34));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].CreditorAccount.SecondaryIdentification").length(), greaterThanOrEqualTo(1));
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.SchemeName[0]") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.SchemeName[0]"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.SchemeName[0]").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.SchemeName[0]").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.Identification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.Identification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.Identification").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.Identification").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.Name") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.Name"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.Name").length(), lessThanOrEqualTo(140));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.Name").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.AddressType") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.AddressType"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.AddressType"), anyOf(equalTo("Business"), equalTo("Correspondence"), equalTo("DeliveryTo"), equalTo("MailTo"), equalTo("POBox"), equalTo("Postal"), equalTo("Residential"), equalTo("Statement")));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.Department") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.Department"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.Department").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.Department").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.SubDepartment") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.SubDepartment"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.SubDepartment").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.SubDepartment").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.StreetName") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.StreetName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.StreetName").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.StreetName").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.BuildingNumber") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.BuildingNumber"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.BuildingNumber").length(), lessThanOrEqualTo(16));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.BuildingNumber").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.PostCode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.PostCode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.PostCode").length(), lessThanOrEqualTo(16));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.PostCode").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.TownName") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.TownName"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.TownName").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.TownName").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.CountrySubDivision") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.CountrySubDivision"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.CountrySubDivision").length(), lessThanOrEqualTo(35));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.CountrySubDivision").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.Country") != null) {    
                // MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.Country"), matchesPattern("^[A-Z]{2,2}$")); 
  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.Country"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.AddressLine") != null) {      
                for (int i1 = 0; i1 < response.jsonPath().getList("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.AddressLine").size(); i1++) {      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("Data.Transaction["+ i +"].DebtorAgent.PostalAddress.AddressLine"), instanceOf(List.class));
  
          }
  
          }
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount") != null) {      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.SchemeName[0]") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.SchemeName[0]"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.SchemeName[0]").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.SchemeName[0]").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.Identification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.Identification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.Identification").length(), lessThanOrEqualTo(256));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.Identification").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.Name") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.Name"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.Name").length(), lessThanOrEqualTo(70));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.Name").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.SecondaryIdentification") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Data.Transaction["+ i +"].DebtorAccount.SecondaryIdentification"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.SecondaryIdentification").length(), lessThanOrEqualTo(34));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Data.Transaction["+ i +"].DebtorAccount.SecondaryIdentification").length(), greaterThanOrEqualTo(1));
  
          }
  
          }
      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("Data.Transaction"), instanceOf(List.class));
  
          }
  
          }
      
              if (response.jsonPath().get("Links") != null) {      
              if (response.jsonPath().get("Links.Self") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Links.Self"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Links.First") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Links.First"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Links.Prev") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Links.Prev"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Links.Next") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Links.Next"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Links.Last") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Links.Last"), instanceOf(String.class));  
          }
  
          }
      
              if (response.jsonPath().get("Meta") != null) {      
              if (response.jsonPath().get("Meta.TotalPages") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Meta.TotalPages"), instanceOf(Integer.class));  
          }
      
              if (response.jsonPath().get("Meta.FirstAvailableDateTime") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Meta.FirstAvailableDateTime"), instanceOf(String.class));  
          }
      
              if (response.jsonPath().get("Meta.LastAvailableDateTime") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Meta.LastAvailableDateTime"), instanceOf(String.class));  
          }
  
          }
				}
if (response.statusCode() == 400) {
					System.out.println("Description: Bad request");
      
              if (response.jsonPath().get("Code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Code"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Code").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Code").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Id"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Id").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Id").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Message"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Message").length(), lessThanOrEqualTo(500));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Message").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors") != null) {      
                for (int i = 0; i < response.jsonPath().getList("Errors").size(); i++) {      
              if (response.jsonPath().get("Errors["+ i +"].ErrorCode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].ErrorCode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].ErrorCode").length(), lessThanOrEqualTo(128));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].ErrorCode").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors["+ i +"].Message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].Message"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Message").length(), lessThanOrEqualTo(500));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Message").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors["+ i +"].Path") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].Path"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Path").length(), lessThanOrEqualTo(500));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Path").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors["+ i +"].Url") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].Url"), instanceOf(String.class));  
          }
      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("Errors"), instanceOf(List.class));
  
          }
				}
if (response.statusCode() == 401) {
					System.out.println("Description: Unauthorized");
				}
if (response.statusCode() == 403) {
					System.out.println("Description: Forbidden");
				}
if (response.statusCode() == 404) {
					System.out.println("Description: Not found");
				}
if (response.statusCode() == 405) {
					System.out.println("Description: Method Not Allowed");
				}
if (response.statusCode() == 406) {
					System.out.println("Description: Not Acceptable");
				}
if (response.statusCode() == 429) {
					System.out.println("Description: Too Many Requests");
				}
if (response.statusCode() == 500) {
					System.out.println("Description: Internal Server Error");
      
              if (response.jsonPath().get("Code") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Code"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Code").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Code").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Id") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Id"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Id").length(), lessThanOrEqualTo(40));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Id").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Message"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Message").length(), lessThanOrEqualTo(500));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Message").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors") != null) {      
                for (int i = 0; i < response.jsonPath().getList("Errors").size(); i++) {      
              if (response.jsonPath().get("Errors["+ i +"].ErrorCode") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].ErrorCode"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].ErrorCode").length(), lessThanOrEqualTo(128));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].ErrorCode").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors["+ i +"].Message") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].Message"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Message").length(), lessThanOrEqualTo(500));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Message").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors["+ i +"].Path") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].Path"), instanceOf(String.class));  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Path").length(), lessThanOrEqualTo(500));
  
                MatcherAssert.assertThat(response.jsonPath().getString("Errors["+ i +"].Path").length(), greaterThanOrEqualTo(1));
  
          }
      
              if (response.jsonPath().get("Errors["+ i +"].Url") != null) {  
                MatcherAssert.assertThat(response.jsonPath().get("Errors["+ i +"].Url"), instanceOf(String.class));  
          }
      
                  }    
                MatcherAssert.assertThat(response.jsonPath().getList("Errors"), instanceOf(List.class));
  
          }
				}
  
            }  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
    }
}
