
// ********RoostGPT********
/*
Test generated by RoostGPT for test vertexxx using AI Type Vertex AI and AI Model code-bison

ROOST_METHOD_HASH=updateInfoUserBy_2785869622
ROOST_METHOD_SIG_HASH=updateInfoUserBy_18e45d00d5

 **Scenario 1: Successful User Info Update**

**TestName:** updateInfoUserBy_ValidData_ReturnsUpdatedMessage

**Description:**
This test scenario verifies the successful update of user information when valid data is provided.

**Execution:**
**Arrange:**
- Create a User_Info object with valid data for photoURL, favoritesMusics, gender, phone, instaURL, twitterURL, and favoritesThings.
- Mock the UserInfoRepo.save() method to return the updated User_Info object.

**Act:**
- Invoke the updateInfoUserBy() method with the valid data.

**Assert:**
- Assert that the returned value is equal to "ATUALIZADO".
- Assert that the UserInfoRepo.save() method was called once with the expected User_Info object.

**Validation:**
This test ensures that the method correctly updates the user information when valid data is provided and returns the appropriate message indicating a successful update.

**Significance:**
This test is crucial as it validates the core functionality of the method in updating user information, which is essential for maintaining user profiles and preferences within the application.

**Scenario 2: Null Photo URL**

**TestName:** updateInfoUserBy_NullPhotoURL_ThrowsException

**Description:**
This test scenario checks for proper error handling when a null value is provided for the photoURL parameter.

**Execution:**
**Arrange:**
- Create a User_Info object with a null value for photoURL and valid data for other fields.

**Act:**
- Invoke the updateInfoUserBy() method with the User_Info object containing a null photoURL.

**Assert:**
- Assert that an IllegalArgumentException is thrown with an appropriate error message indicating that photoURL cannot be null.

**Validation:**
This test ensures that the method handles null values for the photoURL parameter gracefully by throwing an exception, preventing invalid data from being saved in the database.

**Significance:**
This test is important as it guarantees data integrity by ensuring that mandatory fields cannot be left empty or contain invalid values, which could lead to inconsistencies in user profiles.

**Scenario 3: Empty Favorites Musics**

**TestName:** updateInfoUserBy_EmptyFavoritesMusics_UpdatesSuccessfully

**Description:**
This test scenario verifies that the method can handle empty strings for the favoritesMusics parameter.

**Execution:**
**Arrange:**
- Create a User_Info object with an empty string for favoritesMusics and valid data for other fields.

**Act:**
- Invoke the updateInfoUserBy() method with the User_Info object containing an empty favoritesMusics string.

**Assert:**
- Assert that the returned value is equal to "ATUALIZADO".
- Assert that the UserInfoRepo.save() method was called once with the expected User_Info object.

**Validation:**
This test ensures that the method allows empty strings for the favoritesMusics parameter, allowing users to leave this field blank if they choose not to specify their favorite music preferences.

**Significance:**
This test is essential as it accommodates user preferences and avoids unnecessary restrictions on data input, providing flexibility in user profile updates.

**Scenario 4: Non-existing User ID**

**TestName:** updateInfoUserBy_NonExistingUserID_ReturnsNull**

**Description:**
This test scenario checks the behavior of the method when an invalid or non-existing user ID is provided.

**Execution:**
**Arrange:**
- Create a User_Info object with a non-existing user ID and valid data for other fields.

**Act:**
- Invoke the updateInfoUserBy() method with the User_Info object containing a non-existing user ID.

**Assert:**
- Assert that the returned value is null.
- Assert that the UserInfoRepo.save() method was not called.

**Validation:**
This test ensures that the method handles non-existing user IDs appropriately by not updating any information and returning null, indicating that the update operation was unsuccessful.

**Significance:**
This test is vital as it prevents the accidental update of user information for non-existent users, maintaining data consistency and preventing potential security vulnerabilities.
*/

// ********RoostGPT********

package com.medeiros.SPRINGProject.Controllers;

import com.medeiros.SPRINGProject.Controllers.UserAccountController;
import com.medeiros.SPRINGProject.Models.*;
import org.junit.jupiter.api.*;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.Optional;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;
import java.time.LocalDateTime;
import java.util.Objects;

@DisplayName("UserAccountControllerUpdateInfoUserByTest")
public class UserAccountControllerUpdateInfoUserByTest {

	@InjectMocks
	private UserAccountController userAccountController;

	@Mock
	private UserInfoRepository userInfoRepo;

	@Nested
	@DisplayName("Successful User Info Update")
	class SuccessfulUserInfoUpdate {

		@Test
		@Tag("valid")
		@DisplayName("updateInfoUserBy_ValidData_ReturnsUpdatedMessage")
		void updateInfoUserBy_ValidData_ReturnsUpdatedMessage() {
			// Arrange
			User_Info expectedUserInfo = new User_Info(1, "valid_photoURL", "valid_favoritesMusics", "valid_gender",
					"valid_phone", "valid_instaURL", "valid_twitterURL", "valid_favoritesThings");
			when(userInfoRepo.save(expectedUserInfo)).thenReturn(expectedUserInfo);
			// Act
			String actualResult = userAccountController.updateInfoUserBy(1, "valid_photoURL", "valid_favoritesMusics",
					"valid_gender", "valid_phone", "valid_instaURL", "valid_twitterURL", "valid_favoritesThings");
			// Assert
			assertThat(actualResult).isEqualTo("ATUALIZADO");
			verify(userInfoRepo, times(1)).save(expectedUserInfo);
		}

	}

	@Nested
	@DisplayName("Error Handling")
	class ErrorHandling {

		@Test
		@Tag("invalid")
		@DisplayName("updateInfoUserBy_NullPhotoURL_ThrowsException")
		void updateInfoUserBy_NullPhotoURL_ThrowsException() {
			// Arrange
			User_Info userInfo = new User_Info(1, null, "valid_favoritesMusics", "valid_gender", "valid_phone",
					"valid_instaURL", "valid_twitterURL", "valid_favoritesThings");
			// Act & Assert
			assertThat(userAccountController.updateInfoUserBy(1, null, "valid_favoritesMusics", "valid_gender",
					"valid_phone", "valid_instaURL", "valid_twitterURL", "valid_favoritesThings"))
				.isInstanceOf(IllegalArgumentException.class);
			verify(userInfoRepo, times(0)).save(any());
		}

	}

	@Nested
	@DisplayName("Handling Empty Strings")
	class HandlingEmptyStrings {

		@Test
		@Tag("valid")
		@DisplayName("updateInfoUserBy_EmptyFavoritesMusics_UpdatesSuccessfully")
		void updateInfoUserBy_EmptyFavoritesMusics_UpdatesSuccessfully() {
			// Arrange
			User_Info expectedUserInfo = new User_Info(1, "valid_photoURL", "", "valid_gender", "valid_phone",
					"valid_instaURL", "valid_twitterURL", "valid_favoritesThings");
			when(userInfoRepo.save(expectedUserInfo)).thenReturn(expectedUserInfo);
			// Act
			String actualResult = userAccountController.updateInfoUserBy(1, "valid_photoURL", "", "valid_gender",
					"valid_phone", "valid_instaURL", "valid_twitterURL", "valid_favoritesThings");
			// Assert
			assertThat(actualResult).isEqualTo("ATUALIZADO");
			verify(userInfoRepo, times(1)).save(expectedUserInfo);
		}

	}

	@Nested
	@DisplayName("Handling Non-existing User ID")
	class HandlingNonExistingUserID {

		@Test
		@Tag("invalid")
		@DisplayName("updateInfoUserBy_NonExistingUserID_ReturnsNull")
		void updateInfoUserBy_NonExistingUserID_ReturnsNull() {
			// Arrange
			User_Info userInfo = new User_Info(1, "valid_photoURL", "valid_favoritesMusics", "valid_gender",
					"valid_phone", "valid_instaURL", "valid_twitterURL", "valid_favoritesThings");
			// Act
			String actualResult = userAccountController.updateInfoUserBy(2, "valid_photoURL", "valid_favoritesMusics",
					"valid_gender", "valid_phone", "valid_instaURL", "valid_twitterURL", "valid_favoritesThings");
			// Assert
			assertThat(actualResult).isNull();
			verify(userInfoRepo, times(0)).save(any());
		}

	}

}