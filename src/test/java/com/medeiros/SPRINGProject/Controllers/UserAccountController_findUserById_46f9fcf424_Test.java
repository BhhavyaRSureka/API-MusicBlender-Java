// Test generated by RoostGPT for test JavaTest using AI Type Open AI and AI Model gpt-4

package com.medeiros.SPRINGProject.Controllers;

import com.medeiros.SPRINGProject.Models.User_Credentials;
import com.medeiros.SPRINGProject.Repositories.UserAccountRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class UserAccountController_findUserById_46f9fcf424_Test {

    @Mock
    private UserAccountRepository UserAccRepo;

    @InjectMocks
    private UserAccountController userAccountController;

    private User_Credentials userCredentials;

    @BeforeEach
    public void setUp() {
        userCredentials = new User_Credentials();
        userCredentials.setId(1);
        userCredentials.setUsername("test");
        userCredentials.setPassword("password");
    }

    @Test
    public void testFindUserById_ValidId() {
        when(UserAccRepo.findById(1)).thenReturn(Optional.of(userCredentials));

        User_Credentials result = userAccountController.findUserById("1");

        assertNotNull(result);
        assertEquals(userCredentials, result);
    }

    @Test
    public void testFindUserById_InvalidId() {
        when(UserAccRepo.findById(2)).thenReturn(Optional.empty());

        User_Credentials result = userAccountController.findUserById("2");

        assertNull(result);
    }

    @Test
    public void testFindUserById_NonNumericId() {
        assertThrows(NumberFormatException.class, () -> {
            userAccountController.findUserById("nonNumeric");
        });
    }
}
